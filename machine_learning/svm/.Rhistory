show(p1, width = 15)
theme_classic(text = element_text(size=20)
theme_classic(text = element_text(size=20))
# show plot
show(p1)
theme(text = element_text(size=20))
# show plot
Explain what aes is
```{r}
p3 <- ggplot( summary.I_sc, aes( x=mutant, y=mean ) ) +
geom_point() +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.1) +
ylab( "Interface score" ) +
theme_classic() +
geom_point() +
p2 <- ggplot( top.hits, aes( x=mutant, y=I_sc ) ) +
)
library(plyr) # for ldply(), mapvalues()
library(dplyr) # for select(), arrange(), group_by(), filter()
library(ggplot2) # ggplot()
paths <- dir("./scorefiles", pattern="docking\\.fasc$", full.names=T) # get names of all files in current dir ending in docking.fasc
names(paths) <- basename(paths) # read all files into one large table
all.data <- ldply(paths, read.table, header=T, stringsAsFactors=T)
# The file name is stored in the column ".id"
#Change the columan name mutant instead.
colnames(all.data)[which(names(all.data) == ".id")] <- "mutant"
# turn file names into nice receptor names
all.data$mutant <- mapvalues(all.data$mutant,
from = c("gp1_R111A_Y211A_docking.fasc",
"gp1_R111A_docking.fasc",
"trans_N348A_Y211A_docking.fasc",
"trans_N348A_docking.fasc",
"trans_N348K_docking.fasc",
"trans_N348W_Y211A_docking.fasc",
"trans_N348W_docking.fasc",
"trans_Y211A_docking.fasc",
"trans_Y211D_docking.fasc",
"trans_Y211T_docking.fasc",
"human_MACV_GP1_docking.fasc"
),
to = c("vR111A_Y211A",
"vR111A",
"N348A_Y211A",
"N348A",
"N348K",
"N348W_Y211A",
"N348W",
"Y211A",
"Y211D",
"Y211T",
"WT"))
paths <- dir("./scorefiles", pattern="docking\\.fasc$", full.names=T) # get names of all files in current dir ending in docking.fasc
names(paths) <- basename(paths) # read all files into one large table
all.data <- ldply(paths, read.table, header=T, stringsAsFactors=T)
colnames(all.data)[which(names(all.data) == ".id")] <- "mutant"
all.data$mutant <- mapvalues(all.data$mutant,
from = c("gp1_R111A_Y211A_docking.fasc",
"gp1_R111A_docking.fasc",
"trans_N348A_Y211A_docking.fasc",
"trans_N348A_docking.fasc",
"trans_N348K_docking.fasc",
"trans_N348W_Y211A_docking.fasc",
"trans_N348W_docking.fasc",
"trans_Y211A_docking.fasc",
"trans_Y211D_docking.fasc",
"trans_Y211T_docking.fasc",
"human_MACV_GP1_docking.fasc"
),
to = c("vR111A_Y211A",
"vR111A",
"N348A_Y211A",
"N348A",
"N348K",
"N348W_Y211A",
"N348W",
"Y211A",
"Y211D",
"Y211T",
"WT"))
```
head(all.data)
all.data <- ldply(paths, read.table, header=T, stringsAsFactors=T)
head(all.data)
"gp1_R111A_docking.fasc",
"gp1_R111A_docking.fasc",
"trans_N348A_Y211A_docking.fasc",
"trans_N348A_docking.fasc",
"trans_N348K_docking.fasc",
"trans_N348W_Y211A_docking.fasc",
"trans_N348W_docking.fasc",
library(plyr) # for ldply(), mapvalues()
library(dplyr) # for select(), arrange(), group_by(), filter()
library(ggplot2) # ggplot()
paths <- dir("./scorefiles", pattern="docking\\.fasc$", full.names=T)
names(paths) <- basename(paths)
all.data <- ldply(paths, read.table, header=T, stringsAsFactors=T)
source("new_figures.R")
p4 <- ggplot(all.data, aes( x=mean, y= mean_max_applied_force ) ) +
)
head(all.data)
head(all.data)
head(cars)
data(ToothGrowth)
data() #Look at all the pre-loaded datasets
#?ToothGrowth #Gets the R documentation of the the ToothGrowth Data set
#Note: Use Tab for Autocompletion
head(ToothGrowth) #Gets the first few lines of the ToothGrowth dataset
len
t.test(ToothGrowth$len[ToothGrowth$supp == "VC"], ToothGrowth$len[ToothGrowth$supp == "OJ"])
data(DNAase)
#?DNase
head(DNase)
#Use scatterplot to plot numeric variables against each other
plot(DNase$conc, Dnase$density)
data(DNaase)
#?DNase
head(DNase)
#Use scatterplot to plot numeric variables against each other
plot(DNase$conc, Dnase$density)
data(DNaase)
data(DNase)
data(DNase)
#?DNase
head(DNase)
#Use scatterplot to plot numeric variables against each other
plot(DNase$conc, Dnase$density)
plot(DNase$conc, DNase$density)
```
```{r}
head(PlantGrowth)
plants <- unstack(PlantGrowth)
head(plants)
print(PlantGrowth)
?unstack
```{r}
plants <- unstack(PlantGrowth)
plants
```
attach(plants)
t.test(ctrl, trt1)
t.test(ctrl, trt2)
attach(cars)
head(cars)
attach(cars)
speed_dist.cor = cor.test(speed, dist)
print(speed_dist.cor)
attach(cabbages)
library(MASS) # load the MASS library to make the data set available
head(cabbages)
model = lm(VitC~ Cult + Date)
attach(cabbages)
= lm(VitC~ Cult + Date)
model -> lm(Vit C~ Cult + Date)
model -> lm(VitC~ Cult + Date)
model = lm(VitC~ Cult + Date)
summary(model)
head(cabbages)
attach(cabbages)
model = lm(VitC~ HeadWt + Cult)
summary(model)
head(iris)
setosa.length = iris$Sepal.Length[Species == "setosa"]
setosa.length = iris$Sepal.Length[iris$Species == "setosa"]
print(setosa.length)
virginica.length = virginica$Sepal.Length[iris$Species == "virginica"]
print(iris)
virginica.length = virginica$Sepal.Length[iris$Species == "virginica"]
virginica.length = virginica$Sepal.Length[iris$Species == "virginica"]
virginica.length = iris$Sepal.Length[iris$Species == "virginica"]
head(virginica.length)
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.model = glm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris.small, family = binomial)
iris.model2 = glm(Species ~ Sepal.Width + Petal.Length + Petal.Width, data = iris.small, family = binomial)
iris.model3 = glm(Species ~ Petal.Length + Petal.Width, data = iris.small, family = binomial)
new.data = data.frame(iris.model3$fitted.values, iris.model3$linear.predictors, iris.small$Species)
ggplot(data = new.data, aes(y =iris.model3$fitted.values, x = iris.model3$linear.predictors, color = iris.small$Species)) + geom_point()
ggplot(data = new.data, aes(y =iris.model3$fitted.values, x = iris.model3$linear.predictors, color = iris.small$Species)) +
geom_point()
ggplot(data = new.data, aes(y =iris.model3$fitted.values, x = iris.model3$linear.predictors, color = iris.small$Species)) +
geom_point() +
xlab("Predictor")
ggplot(data = new.data, aes(y =iris.model3$fitted.values, x = iris.model3$linear.predictors, color = iris.small$Species)) +
geom_point() +
xlab("Predictor") +
ylab("Probability Species is Virginica")
ggplot(data = new.data, aes(x = iris.model3$linear.predictors, fill = iris.small$Species )) + geom_density(alpha = 0.5)
new.data = data.frame(prob = iris.model3$fitted.values, predictors = iris.model3$linear.predictors, species =  iris.small$Species)
ggplot(data = new.data, aes(x = predictors, y=prob, x = , color = species)) +
geom_point() +
xlab("Predictor") +
ylab("Probability Species is Virginica")
new.data = data.frame(prob = iris.model3$fitted.values, predictors = iris.model3$linear.predictors, species =  iris.small$Species)
ggplot(data = new.data, aes(x = predictors, y=prob, color = species)) +
geom_point() +
xlab("Predictor") +
ylab("Probability Species is Virginica")
plant1 <- data.frame(Sepal.Length=6.4, Sepal.Width=2.8, Petal.Length=4.6, Petal.Width=1.8)
plant2 <- data.frame(Sepal.Length=6.3, Sepal.Width=2.5, Petal.Length=4.1, Petal.Width=1.7)
plant3 <- data.frame(Sepal.Length=6.7, Sepal.Width=3.3, Petal.Length=5.2, Petal.Width=2.3)
plant1
predict(iris.model3, plant1)
predict(iris.model3, plant2)
predict(iris.model3, plant3)
predict(iris.model3, plant1, type = "response")
predict(iris.model3, plant1, type = "response")
predict(iris.model3, plant2, type = "response")
predict(iris.model3, plant3, type = "response")
cutoff = 0.80
probs = iris.model3$fitted.values
head(probs)
num.right = probs > cut.off
num.right = probs > cutoff
head(num.right)
num.right = sum(probs > cutoff)
cutoff = 0.80
probs = iris.model3$fitted.values
num.right = sum(probs > cutoff)
num.right
num.wrong = length(probs) - num.right
cutoff = 0.80
probs = iris.model3$fitted.values
num.right = sum(probs > cutoff)
num.right
num.wrong = length(probs) - num.right
num.wrong
cutoff = 0
num.right = sum(probs > cutoff & new.data$species == "virginica")
num.right
cutoff = 0
new.data$prob
num.right = sum(probs > cutoff & new.data$species == "virginica")
num.right
cutoff = 0
probs = new.data$prob
num.right = sum(probs > cutoff & new.data$species == "virginica")
num.right
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
# fit logistic regression model
glm.out <- glm(Species ~ Sepal.Length,
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
# fit logistic regression model
glm.out <- glm(Species ~ Sepal.Length,
data = iris.small,
family = binomial)
# combine fitted values and Species identity
pred_data <- data.frame(probability=glm.out$fitted.values, Species=iris.small$Species)
cutoff = 0.05
pred_data %>% filter(probability > cutoff, Species == "virginica") %>% tally()
pred_data %>% filter(probability <= cutoff, Species == "virginica") %>% tally()
pred_data %>% filter(probability <= cutoff, Species == "versicolor") %>% tally()
cutoff = 0.5
pred_data %>% filter(probability > cutoff, Species == "virginica") %>% tally()
cutoff = 0.5
pred_data %>% filter(probability <= cutoff, Species == "versicolor") %>% tally()
head(iris.small)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts")
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts/log_regression")
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts/t_tests.R')
t.test(tolerated_data$wcnSC, non_tolerated_data$wcnSC)
t.test(tolerated_data$mean_score, non_tolerated_data$mean_score)
t.test(tolerated_data$RSA, non_tolerated_data$RSA)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts/summarize_all_data.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/r_scripts/summarize_all_data.R', echo=TRUE)
num_samples = 100
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/mean_score_log.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_wcn_ss_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_ss_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_ss_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/ss_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/wcn_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_wcn_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_ss_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_ss_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_wcn_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/ss_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_wcn_ss_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/wcn_ss_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/wcn_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/wcn_ss_mean_score_log.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/model_generation_scripts/rsa_log.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/mean_score_svm.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/mean_score_svm.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_ss_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_wcn_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_wcn_mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/ss_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_ss_mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_wcn_ss_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_ss_mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_mean_score_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/wcn_ss_svm.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/rsa_wcn_ss_mean_score_svm.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
head(AUC_test)
head(Test_AUC_Values)
head(Test_Regression_df)
head(AUC_test)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/log_regression/roc_test_values.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/model_generation_scripts/ss_mean_score_svm.R', echo=TRUE)
setwd("~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm")
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
library(dplyr)
source('~/Documents/Wilke_Lab/github/EGFP_deletion_prediction/machine_learning/svm/roc_test_values.R', echo=TRUE)
